[buildout]
effective-user = ${env:USER}
clients = instance

debug-mode = on
deprecation-warnings = on
verbose-security = off
############################################
# Test Packages
# ----------
# Specify a list of packages that you wish to include in your test suite.
# These packages will have their included tests run when you invoke
# bin/test
#
test-packages =
#    plonetheme.sunburst

extends =
    sources.cfg
    buildout.cfg

eggs +=
    Products.DocFinderTab
    plone.app.debugtoolbar
    Products.PrintingMailHost
#    bpython
#    pdbpp
#    WingDBG
    plone.reload
#    Products.PDBDebugMode
#    ipdb
#    Products.Clouseau
#    uwosh.northstar

#    Products.DCWorkflow
# requires graphviz
#    Products.DCWorkflowGraph
# There's a problem with Glowworm and Plone 3.3.3 -kb 2010-01-14
#    Products.Gloworm
#    Products.PTProfiler
#    Products.signalstack
#    Products.ZopeProfiler
#    zope.testrecorder

# wildcard.fixpersistentutilities ...
# append '/@@fix-persistent-utilities' onto your plone site root
# or the root of zope(for gsm) and browse the registered utilities
# on your site and remove things at will.

parts +=
    test
    zopeskel
    omelette
    paster
    ipzope
    mkrelease
    checkversions

zcml +=
    plone.reload


# mr.developer settings:
always-checkout = force
sources = sources
auto-checkout = *

#[sources]
#WingDBG = hg http://bitbucket.org/encolpe/wingdbg
#WingDBG = hg http://bitbucket.org/encolpe/wingdbg update=true

[paster]
recipe = zc.recipe.egg
eggs =
   ZopeSkel
   PasteScript
   PasteDeploy
   zopeskel.dexterity<=2.99
   ${buildout:eggs}
   zest.releaser

entry-points = paster=paste.script.command:run

[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}



# run tests with:
#    bin/test -s your.packagename
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress', '--tests-pattern', '^f?tests$', '-v']

eggs =
    ${buildout:test-packages}
    ${buildout:eggs}


# Coverage report generator.
# Run: ``bin/test --coverage=coverage``
# and then: ``bin/coveragereport``
[coverage-report]
recipe = zc.recipe.egg
eggs = z3c.coverage
scripts = coveragereport
arguments = ('parts/test/coverage', 'coverage')


# Run: ``bin/checkversions versions.cfg``
[checkversions]
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]


# Tool to make releases
# Run: ``bin/mkrelease --help``
[mkrelease]
recipe = zc.recipe.egg
eggs = jarn.mkrelease
