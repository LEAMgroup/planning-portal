
[buildout]
# mkdir -p ../buildout-cache/{eggs,downloads}
eggs-directory=../buildout-cache/eggs
download-cache=../buildout-cache/downloads

# Don't download new things unless needed to satisfy dependencies.
# Override this on the command line with the "-n" flag.
newest = false

# Pick final releases over newer development releases when it's
# possible to do so and still fulfill requirements. Note that explicit
# version specifications will override this preference.
prefer-final = true


versions = versions

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads

# unzip all eggs for easier debugging
unzip = true


[zopepy]
# installs a zopepy python interpreter that runs with your
# full Zope environment
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = zopepy
scripts = zopepy




[unifiedinstaller]
# This recipe installs the plonectl script and a few other convenience
# items.
# For options see http://pypi.python.org/pypi/plone.recipe.unifiedinstaller
recipe = plone.recipe.unifiedinstaller
user = ${buildout:user}
primary-port = ${buildout:http-address}
sudo-command =


[repozo]
# This recipe builds the repozo script for non-zeo installations.
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo


[backup]
# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
recipe = collective.recipe.backup
location = ${buildout:backups-dir}/backups
snapshotlocation = ${buildout:backups-dir}/snapshotbackups


[zeoserver]
# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeo-address}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver/zeoserver.pid
socket-name = ${buildout:directory}/var/zeoserver/zeo.zdsock
blob-storage = ${buildout:directory}/var/blobstorage
# You may also control the environment variables for the zeoserver.
environment-vars = ${buildout:environment-vars}


[chown-zeo]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command =echo Dummy references to force this to execute after referenced parts
    echo ${backup:location} ${unifiedinstaller:sudo-command}
    chmod 660 .installed.cfg
    touch ${buildout:directory}/var/zeoserver/zeoserver.log
    find ${buildout:directory}/var -type d -exec chmod 770 {} \;
    chmod 744 ${buildout:directory}/bin/*
    mkdir -p ${buildout:directory}/parts/instance/{Products,import}
update-command = ${chown-zeo:command}


[zopeskel]
# installs paster and Zopeskel
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    Paste
    PasteDeploy
    PasteScript
    ${buildout:eggs}


[instance]
# Use this section to install and configure a Zope
# client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
recipe = plone.recipe.zope2instance
zeo-client = true
zeo-address = ${zeoserver:zeo-address}

user = ${buildout:user}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
http-address = ${buildout:http-address}

blob-storage = ${zeoserver:blob-storage}
shared-blob = on

debug-mode = ${buildout:debug-mode}
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}

# Put the log, pid, lock files in var/instance
event-log = ${buildout:directory}/var/instance/event.log
z2-log    = ${buildout:directory}/var/instance/Z2.log
pid-file  = ${buildout:directory}/var/instance/instance.pid
lock-file = ${buildout:directory}/var/instance/instance.lock

# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs = ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = ${buildout:zcml}

products = ${buildout:directory}/products

# You may also control the environment variables for the instance.
environment-vars = ${buildout:environment-vars}


[ipzope]
# a IPython Shell for interactive use with zope running.
# you also need to copy
# https://svn.plone.org/svn/collective/dotipython/trunk/ipy_profile_zope.py
# to your $HOME/.ipython directory for the following to work.
recipe = zc.recipe.egg
eggs =
    ipython
    ${instance:eggs}
initialization =
    import sys, os
    os.environ["SOFTWARE_HOME"] = "${buildout:directory}/parts/zope2/lib/python"
#   os.environ["SOFTWARE_HOME"] = "${zope2:location}/lib/python"
    os.environ["INSTANCE_HOME"] = "${instance:location}"
    sys.argv[1:1] = "-p zope".split()
#extra-paths = ${zope2:location}/lib/python
extra-paths = ${buildout:directory}/parts/zope2/lib/python
scripts = ipython=ipzope


[env]
recipe = gocept.recipe.env


[plonesite]
recipe = collective.recipe.plonesite
site-id = ${buildout:site-id}
#admin-user = admin
instance = instance
zeoserver = zeoserver
profiles-initial =
#    Products.CMFPlone:plone-content
#    Products.CMFPlone:plone
#    my.package:initial
profiles =
#    my.package:default
#    my.other.package:default
post-extras =
#    ${buildout:directory}/my_script.py
pre-extras =
#    ${buildout:directory}/my_other_script.py
